name: Build and Deploy to Argo CD

on:
  push:
    branches:
      - master
      - production
      - stage
      - development

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Harbor
        run: echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ secrets.HARBOR_URL }} -u ${{ secrets.HARBOR_USERNAME }} --password-stdin

      - name: Determine Dockerfile and Repository
        id: config
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "::set-output name=dockerfile::Dockerfile"
            echo "::set-output name=repository::post/prd"
          elif [ "${{ github.ref }}" == "refs/heads/development" ]; then
            echo "::set-output name=dockerfile::Dockerfile.dev"
            echo "::set-output name=repository::post/dev"
          elif [ "${{ github.ref }}" == "refs/heads/stage" ]; then
            echo "::set-output name=dockerfile::Dockerfile.stg"
            echo "::set-output name=repository::post/stg"
          else
            echo "::set-output name=dockerfile::Dockerfile.dev"
            echo "::set-output name=repository::post/dev"
          fi

      - name: Determine new tag
        id: new_tag
        run: |
          repository=${{ steps.config.outputs.repository }}
          latest_tag=$(curl -s -u "${{ secrets.HARBOR_USERNAME }}:${{ secrets.HARBOR_PASSWORD }}" "${{ secrets.HARBOR_URL }}/v2/${repository}/tags/list" | grep -oP '"\d+\.\d+"' | sort -V | tail -n 1 | tr -d '"')
          if [ $? -ne 0 ] || [ -z "$latest_tag" ]; then
            latest_tag="0.01"
          fi
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            new_tag=${{ github.event.inputs.tag }}
          else
            IFS='.' read -r major minor <<< "$latest_tag"
            new_minor=$((minor + 1))
            new_tag="$major.$new_minor"
          fi
          echo "Latest tag: $latest_tag"
          echo "New tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"

      - name: Build and push Docker image
        run: |
          new_tag=${{ steps.new_tag.outputs.new_tag }}
          repository=${{ steps.config.outputs.repository }}
          TAG=${repository}:${new_tag}
          IMAGE_NAME="${{ secrets.HARBOR_URL }}/${repository}:${new_tag}"
          docker build -t TAG -f ./${{ steps.config.outputs.dockerfile }} .
          docker push $IMAGE_NAME


  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Install Argo CD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.5.0/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Login to Argo CD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_URL }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          argocd login --insecure $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD

      - name: Update Argo CD Application Image
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_URL }}
        run: |
          argocd app set post --image post:latest
          argocd app sync post --server $ARGOCD_SERVER
